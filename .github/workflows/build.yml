name: 'buildx docker images'

on:
  push:
    branches:
      - master
    tags:
      - "v*"

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: codenai/talebook

      - name: Prepare Build Args
        id: prep
        run: |
          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          BUILD_ARGS="GIT_VERSION=${VERSION}"
          echo "Build args: ${BUILD_ARGS}"

          # Set output parameters
          echo ::set-output name=build_args::${BUILD_ARGS}
          echo ::set-output name=version::${VERSION}

      - name: Build Image
        id: build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          platforms: linux/amd64,linux/arm64
          labels: ${{ steps.meta.outputs.labels }}
          push: false
          cache-from: type=registry,ref=codenai/talebook:latest
          cache-to: type=inline
          tags: |
            codenai/talebook:${{ steps.prep.outputs.version }}
            codenai/talebook:latest
          build-args: |
            ${{ steps.prep.outputs.build_args }}
          outputs: type=docker,dest=/tmp/talebook-image.tar

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.prep.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/talebook-image.tar
          asset_name: talebook-${{ steps.prep.outputs.version }}.docker.tar
          asset_content_type: application/octet-stream

