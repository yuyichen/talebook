name: 'buildx docker images'

on:
  push:
    tags:
      - "v*"

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        env:
          # Avoid set-output deprecation warning
          ACTIONS_STEP_DEBUG: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        env:
          # Avoid set-output deprecation warning
          ACTIONS_STEP_DEBUG: true
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:master
          buildkitd-flags: --debug
          use: true
        env:
          # Avoid set-output deprecation warning
          ACTIONS_STEP_DEBUG: true

      - name: Cache Docker layers
        uses: actions/cache@v3
        env:
          # Avoid set-output deprecation warning
          ACTIONS_STEP_DEBUG: true
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            ${{ runner.os }}-

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        env:
          # Avoid set-output deprecation warning
          ACTIONS_STEP_DEBUG: true
        with:
          images: codenai/talebook

      - name: Prepare Build Args
        id: prep
        run: |
          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          BUILD_ARGS="GIT_VERSION=${VERSION}"
          echo "Build args: ${BUILD_ARGS}"

          # Set output parameters using Environment Files (new method)
          echo "build_args=${BUILD_ARGS}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build Image (amd64)
        id: build-amd64
        uses: docker/build-push-action@v5
        env:
          # Avoid set-output deprecation warning
          ACTIONS_STEP_DEBUG: true
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          platforms: linux/amd64
          labels: ${{ steps.meta.outputs.labels }}
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          tags: |
            codenai/talebook:${{ steps.prep.outputs.version }}-amd64
            codenai/talebook:latest-amd64
          build-args: |
            ${{ steps.prep.outputs.build_args }}
          outputs: type=docker,dest=/tmp/talebook-image-amd64.tar

      - name: Build Image (arm64)
        id: build-arm64
        uses: docker/build-push-action@v5
        env:
          # Avoid set-output deprecation warning
          ACTIONS_STEP_DEBUG: true
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          platforms: linux/arm64
          labels: ${{ steps.meta.outputs.labels }}
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          tags: |
            codenai/talebook:${{ steps.prep.outputs.version }}-arm64
            codenai/talebook:latest-arm64
          build-args: |
            ${{ steps.prep.outputs.build_args }}
          outputs: type=docker,dest=/tmp/talebook-image-arm64.tar

      # Temp fix for cache export
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Verify Builds
        run: |
          echo "Checking if images were built successfully..."

          if [ ! -f "/tmp/talebook-image-amd64.tar" ]; then
            echo "Error: AMD64 image build artifact not found!"
            exit 1
          fi
          echo "AMD64 image build artifact found. Size: $(du -h /tmp/talebook-image-amd64.tar | cut -f1)"

          if [ ! -f "/tmp/talebook-image-arm64.tar" ]; then
            echo "Error: ARM64 image build artifact not found!"
            exit 1
          fi
          echo "ARM64 image build artifact found. Size: $(du -h /tmp/talebook-image-arm64.tar | cut -f1)"

      - name: Export Docker Images
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p /tmp/release
          echo "Starting Docker image export process..."

          # Check if the build artifacts exist
          if [ ! -f "/tmp/talebook-image-amd64.tar" ]; then
            echo "Error: AMD64 image build artifact not found!"
            exit 1
          fi

          if [ ! -f "/tmp/talebook-image-arm64.tar" ]; then
            echo "Error: ARM64 image build artifact not found!"
            exit 1
          fi

          # List Docker images before loading
          echo "Docker images before loading:"
          docker images | grep talebook || echo "No talebook images found yet"

          # Load and save images with proper names
          echo "Loading AMD64 image..."
          docker load -i /tmp/talebook-image-amd64.tar
          echo "Saving AMD64 image with new name..."
          docker save -o /tmp/release/talebook-${{ steps.prep.outputs.version }}-amd64.docker.tar codenai/talebook:${{ steps.prep.outputs.version }}-amd64

          echo "Loading ARM64 image..."
          docker load -i /tmp/talebook-image-arm64.tar
          echo "Saving ARM64 image with new name..."
          docker save -o /tmp/release/talebook-${{ steps.prep.outputs.version }}-arm64.docker.tar codenai/talebook:${{ steps.prep.outputs.version }}-arm64

          # Verify the saved files exist
          echo "Verifying saved files..."
          if [ ! -f "/tmp/release/talebook-${{ steps.prep.outputs.version }}-amd64.docker.tar" ]; then
            echo "Error: Failed to save AMD64 image!"
            exit 1
          fi

          if [ ! -f "/tmp/release/talebook-${{ steps.prep.outputs.version }}-arm64.docker.tar" ]; then
            echo "Error: Failed to save ARM64 image!"
            exit 1
          fi

          # Create a highly compressed archive containing all images
          echo "Creating compressed archive..."
          cd /tmp/release
          # Use higher compression level (9) and pigz for parallel compression if available
          if command -v pigz >/dev/null 2>&1; then
            echo "Using pigz for parallel compression..."
            pigz -9 -c *.docker.tar > ../talebook-${{ steps.prep.outputs.version }}-docker-images.tar.gz
          else
            echo "Using gzip with maximum compression..."
            tar -I 'gzip -9' -cf ../talebook-${{ steps.prep.outputs.version }}-docker-images.tar.gz *.docker.tar
          fi

          echo "Docker image export process completed successfully"

          # Create a simple README for the release
          cat > /tmp/README.md << EOF
          # Talebook Docker Images

          This release contains Docker images for Talebook, built for multiple platforms.

          ## Images included

          - \`codenai/talebook:${{ steps.prep.outputs.version }}-amd64\` - for AMD64/Intel 64-bit platforms
          - \`codenai/talebook:${{ steps.prep.outputs.version }}-arm64\` - for ARM 64-bit platforms

          ## How to use

          1. Download the \`talebook-${{ steps.prep.outputs.version }}-docker-images.tar.gz\` file
          2. Extract the archive: \`tar -xzf talebook-${{ steps.prep.outputs.version }}-docker-images.tar.gz\`
          3. Load the image for your platform:
             - For AMD64: \`docker load -i talebook-${{ steps.prep.outputs.version }}-amd64.docker.tar\`
             - For ARM64: \`docker load -i talebook-${{ steps.prep.outputs.version }}-arm64.docker.tar\`
          4. Run the container: \`docker run -p 80:80 -v /path/to/books:/data/library codenai/talebook:${{ steps.prep.outputs.version }}-[amd64|arm64]\`

          ## Version

          Version: ${{ steps.prep.outputs.version }}
          Git commit: ${{ github.sha }}
          EOF

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Avoid set-output deprecation warning
          ACTIONS_STEP_DEBUG: true
        with:
          tag_name: ${{ github.ref }}
          release_name: Talebook Release ${{ steps.prep.outputs.version }}
          body_path: /tmp/README.md
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Avoid set-output deprecation warning
          ACTIONS_STEP_DEBUG: true
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/talebook-${{ steps.prep.outputs.version }}-docker-images.tar.gz
          asset_name: talebook-${{ steps.prep.outputs.version }}-docker-images.tar.gz
          asset_content_type: application/gzip

      - name: Split Large AMD64 Image
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Check if AMD64 image is larger than 1.9GB and split if necessary
          cd /tmp/release
          AMD64_SIZE=$(stat -c%s "talebook-${{ steps.prep.outputs.version }}-amd64.docker.tar")
          MAX_SIZE=$((1900 * 1024 * 1024)) # 1.9GB in bytes

          if [ $AMD64_SIZE -gt $MAX_SIZE ]; then
            echo "AMD64 image is larger than 1.9GB, splitting..."
            split -b $MAX_SIZE -d "talebook-${{ steps.prep.outputs.version }}-amd64.docker.tar" "talebook-${{ steps.prep.outputs.version }}-amd64.part."
          fi

      - name: Split Large ARM64 Image
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Check if ARM64 image is larger than 1.9GB and split if necessary
          cd /tmp/release
          ARM64_SIZE=$(stat -c%s "talebook-${{ steps.prep.outputs.version }}-arm64.docker.tar")
          MAX_SIZE=$((1900 * 1024 * 1024)) # 1.9GB in bytes

          if [ $ARM64_SIZE -gt $MAX_SIZE ]; then
            echo "ARM64 image is larger than 1.9GB, splitting..."
            split -b $MAX_SIZE -d "talebook-${{ steps.prep.outputs.version }}-arm64.docker.tar" "talebook-${{ steps.prep.outputs.version }}-arm64.part."
          fi

      - name: Upload AMD64 Image or Parts
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd /tmp/release
          # Check if the image was split
          if ls talebook-${{ steps.prep.outputs.version }}-amd64.part.* 1> /dev/null 2>&1; then
            # Upload split parts
            for part in talebook-${{ steps.prep.outputs.version }}-amd64.part.*; do
              curl -X POST                 -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"                 -H "Content-Type: application/octet-stream"                 --data-binary @"$part"                 "${{ steps.create_release.outputs.upload_url }}&name=$(basename $part)"
            done
          else
            # Upload the whole image
            curl -X POST               -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"               -H "Content-Type: application/octet-stream"               --data-binary @"talebook-${{ steps.prep.outputs.version }}-amd64.docker.tar"               "${{ steps.create_release.outputs.upload_url }}&name=talebook-${{ steps.prep.outputs.version }}-amd64.docker.tar"
          fi

      - name: Upload ARM64 Image or Parts
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd /tmp/release
          # Check if the image was split
          if ls talebook-${{ steps.prep.outputs.version }}-arm64.part.* 1> /dev/null 2>&1; then
            # Upload split parts
            for part in talebook-${{ steps.prep.outputs.version }}-arm64.part.*; do
              curl -X POST                 -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"                 -H "Content-Type: application/octet-stream"                 --data-binary @"$part"                 "${{ steps.create_release.outputs.upload_url }}&name=$(basename $part)"
            done
          else
            # Upload the whole image
            curl -X POST               -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"               -H "Content-Type: application/octet-stream"               --data-binary @"talebook-${{ steps.prep.outputs.version }}-arm64.docker.tar"               "${{ steps.create_release.outputs.upload_url }}&name=talebook-${{ steps.prep.outputs.version }}-arm64.docker.tar"
          fi

      - name: Create Merge Instructions
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd /tmp/release
          # Check if any images were split
          if ls talebook-${{ steps.prep.outputs.version }}-amd64.part.* 1> /dev/null 2>&1 || ls talebook-${{ steps.prep.outputs.version }}-arm64.part.* 1> /dev/null 2>&1; then
            cat >> /tmp/README.md << EOF

          ## Note for Large Images

          Some Docker images in this release are larger than GitHub's file size limit and have been split into multiple parts.

          ### How to Merge Split Parts

          For split images, you'll need to merge the parts before loading:

          1. Download all parts for the architecture you need:
             - AMD64 parts: talebook-${{ steps.prep.outputs.version }}-amd64.part.00, talebook-${{ steps.prep.outputs.version }}-amd64.part.01, etc.
             - ARM64 parts: talebook-${{ steps.prep.outputs.version }}-arm64.part.00, talebook-${{ steps.prep.outputs.version }}-arm64.part.01, etc.

          2. Merge the parts:
             - For AMD64: \`cat talebook-${{ steps.prep.outputs.version }}-amd64.part.* > talebook-${{ steps.prep.outputs.version }}-amd64.docker.tar\`
             - For ARM64: \`cat talebook-${{ steps.prep.outputs.version }}-arm64.part.* > talebook-${{ steps.prep.outputs.version }}-arm64.docker.tar\`

          3. Then proceed with loading the image as described above.
          EOF
          fi

      - name: Update Release with Merge Instructions
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/github-script@v3
        env:
          # Avoid set-output deprecation warning
          ACTIONS_STEP_DEBUG: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const readme = fs.readFileSync('/tmp/README.md', 'utf8');
            await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }},
              body: readme
            });

